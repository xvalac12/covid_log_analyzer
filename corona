#!/usr/bin/bash

export POSIXLY_CORRECT=yes

filter_a=0
filter_b=0
filter_g=0
filter_s=0
cnt=0

used_command="none"
header="id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs"

use_help()
{
	echo "Usage: ./corona [-h] [FILTERS] [COMMAND] [LOG [LOG2 [...]]]"
	#filters
	echo "Filters:"
	echo "	-a DATETIME - only records after DATETIME (including this date)"
	echo "	-b DATETIME - only records before DATETIME (including this date)"
	echo "	-g GENDER - only records for this gender"
	echo "	-s [WIDTH] - !!!not implemented!!!"

	#Commands
	echo "Commands:"
	echo "	infected - print number of infected"
	echo "	merge - merge more logs into 1 file (header will be only at top)"
	echo "	gender - print number of infected by gender"
	echo "	age - print number of infected by age"
	echo "	daily - print number of infected for each day"
	echo "	monthly - print number of infected for each month"
	echo "	yearly - print number of infected for each year"
	echo "	countries - print number of infected for each country"
	echo "	districts - print number of infected for each district"
	echo "	regions - print number of infected for each region"
	
	#Logs
	echo "Logs:"
	echo "	Supported formats are: .csv, .gz, .bz2"
	echo "	No logs -> stdin"

	#Others
	echo "Other specs:"
	echo "	DATETIME - YYYY-MM-DD"
	echo "	GENDERS - M,Z"
}

print_age()
{
	echo "$logs" | awk -F, -vfilter="$filter_s" 'BEGIN{
		age_none = 0
		age_0 = 0
		age_6 = 0
		age_16 = 0
		age_26 = 0
		age_36 = 0
		age_46 = 0
		age_56 = 0
		age_66 = 0
		age_76 = 0
		age_86 = 0
		age_96 = 0
		age_105 = 0
	}
	{
		if ($3 == "")
		{
			age_none = age_none + 1
		}
		if ($3 < 6)
		{
			age_0 = age_0 + 1 
		}
		else if ($3 < 16)
		{
			age_6 = age_6 + 1
		}
		else if ($3 < 26)
		{
			age_16 = age_16 + 1
		}
		else if ($3 < 36)
		{
			age_26 = age_26 + 1
		}
		else if ($3 < 46)
		{
			age_36 = age_36 + 1
		}
		else if ($3 < 56)
		{
			age_46 = age_46 + 1
		}
		else if ($3 < 66)
		{
			age_56 = age_56 + 1
		}
		else if ($3 < 76)
		{
			age_66 = age_66 + 1
		}
		else if ($3 < 86)
		{
			age_76 = age_76 + 1
		}
		else if ($3 < 96)
		{
			age_86 = age_86 + 1
		}
		else if ($3 < 106)
		{
			age_96 = age_96 + 1
		}
		else if ($3 > 105)
		{
			age_105 = age_105 + 1
		}
	}
	END{
			age_0 = age_0 - age_none
			print "0-5   : " age_0 
			print "6-15  : " age_6
			print "16-25 : " age_16
			print "26-35 : " age_26
			print "36-45 : " age_36
			print "46-55 : " age_46
			print "56-65 : " age_56
			print "66-75 : " age_66
			print "76-85 : " age_76
			print "86-95 : " age_86
			print "96-105: " age_96
			print ">105  : " age_105
			if (age_none > 0)
			{
			print "None  : " age_none
			}
	}'
}

gender()
{
		echo "$logs" | awk -F, '{arr[$4]+=1} END{
			print "M: " arr["M"]
			print "Z: " arr["Z"]
			if (arr[""] > 0 )
			{
				print "None: "arr[""]
			}
		}'
}

infected()
{
		echo "$logs" | awk -F, 'END{print NR}'
}

countries()
{
	country=$(echo "$logs" | awk -F, 'BEGIN{country_cnt = 0; cnt = 0}
	{	
		in_list = 0;
		cnt = 0;
		for (cnt = 0; country_cnt > cnt; cnt++)
		{
			if (country_name[cnt] == $8)
			{
				in_list = 1;
				break;
			}
		}
		if ($8 == CZ || $8 == "")
		{
			next
		}
		else
		{
			
			if (in_list == 1)
			{
				each_country[cnt]++;
			}
			else if (In_list == 0)
			{
				each_country[cnt]++;

				country_name[country_cnt] = $8;
				country_cnt++;
			}

		}
		cnt = 0;
	}
	END{
		for (cnt = 0; country_cnt > cnt; cnt++)
		{
			print country_name[cnt]": "each_country[cnt]
		}
	}')
	echo "$country" | awk -F": " '{print $0 | "sort -u"}'
}

districts()
{
	district=$(echo "$logs" | awk -F, 'BEGIN{none=0; district_cnt = 0; cnt = 0}
	{	
		in_list = 0;
		cnt = 0;
		for (cnt = 0; district_cnt > cnt; cnt++)
		{
			if (district_name[cnt] == $6)
			{
				in_list = 1;
				break;
			}
		}
		if ($6 == "")
		{
			none++;
		}
		else
		{	
			if (in_list == 1)
			{
				each_district[cnt]++;
			}
			else if (In_list == 0)
			{
				each_district[cnt]++;

				district_name[district_cnt] = $6;
				district_cnt++;
			}

		}
		cnt = 0;
	}
	END{
		for (cnt = 0; district_cnt > cnt; cnt++)
		{
			print district_name[cnt]": "each_district[cnt]
		}
		if (none > 0)
		{
			print "None: " none
		}
	}')
	echo "$district" | awk -F": " '{print $0 | "sort -u"}'

}

regions()
{
	region=$(echo "$logs" | awk -F, 'BEGIN{none=0; region_cnt = 0; cnt = 0}
	{	
		in_list = 0;
		cnt = 0;
		for (cnt = 0; region_cnt > cnt; cnt++)
		{
			if (region_name[cnt] == $5)
			{
				in_list = 1;
				break;
			}
		}
		if ($5 == "")
		{
			none++;
		}
		else
		{	
			if (in_list == 1)
			{
				each_region[cnt]++;
			}
			else if (In_list == 0)
			{
				each_region[cnt]++;

				region_name[region_cnt] = $5;
				region_cnt++;
			}

		}
		cnt = 0;
	}
	END{
		for (cnt = 0; region_cnt > cnt; cnt++)
		{
			print region_name[cnt]": "each_region[cnt]
		}
		if (none > 0)
		{
			print "None: " none
		}
	}')
	echo "$region" | awk -F": " '{print $0 | "sort -u"}'

}


daily()
{
	day_by_day=$(echo "$logs" | awk -F, 'BEGIN{none=0; day_cnt = 0; cnt = 0}
	{	
		in_list = 0;
		cnt = 0;
		for (cnt = 0; day_cnt > cnt; cnt++)
		{
			if (day_name[cnt] == $2)
			{
				in_list = 1;
				break;
			}
		}
		if ($2 == "")
		{
			none++;
		}
		else
		{	
			if (in_list == 1)
			{
				each_day[cnt]++;
			}
			else if (In_list == 0)
			{
				each_day[cnt]++;

				day_name[day_cnt] = $2;
				day_cnt++;
			}

		}
		cnt = 0;
	}
	END{
		for (cnt = 0; day_cnt > cnt; cnt++)
		{
			print day_name[cnt]": "each_day[cnt]
		}
		if (none > 0)
		{
			print "None: " none
		}
	}')
	echo "$day_by_day" | awk -F": " '{print $0 | "sort -u"}'

}

monthly()
{
	month_by_month=$(echo "$logs" | awk -F, 'BEGIN{none=0; month_cnt = 0; cnt = 0}
	{
		split($2, dates, "-")
		str = sprintf("%s-%s",dates[1], dates[2])
		in_list = 0;
		cnt = 0;
		for (cnt = 0; month_cnt > cnt; cnt++)
		{
			if (month_name[cnt] == str)
			{
				in_list = 1;
				break;
			}
		}
		if (str == "")
		{
			none++;
		}
		else
		{	
			if (in_list == 1)
			{
				each_month[cnt]++;
			}
			else if (In_list == 0)
			{
				each_month[cnt]++;

				month_name[month_cnt] = str;
				month_cnt++;
			}

		}
		cnt = 0;
	}
	END{
		for (cnt = 0; month_cnt > cnt; cnt++)
		{
			print month_name[cnt]": "each_month[cnt]
		}
		if (none > 0)
		{
			print "None: " none
		}
	}')
	echo "$month_by_month" | awk -F": " '{print $0 | "sort -u"}'

}

yearly()
{
	year_by_year=$(echo "$logs" | awk -F, 'BEGIN{none=0; year_cnt = 0; cnt = 0}
	{
		split($2, dates, "-")
		date = dates[1]
		in_list = 0;
		cnt = 0;
		for (cnt = 0; year_cnt > cnt; cnt++)
		{
			if (year_name[cnt] == date)
			{
				in_list = 1;
				break;
			}
		}
		if (date == "")
		{
			none++;
		}
		else
		{	
			if (in_list == 1)
			{
				each_year[cnt]++;
			}
			else if (In_list == 0)
			{
				each_year[cnt]++;

				year_name[year_cnt] = date;
				year_cnt++;
			}

		}
		cnt = 0;
	}
	END{
		for (cnt = 0; year_cnt > cnt; cnt++)
		{
			print year_name[cnt]": "each_year[cnt]
		}
		if (none > 0)
		{
			print "None: " none
		}
	}')
	echo "$year_by_year" | awk -F": " '{print $0 | "sort -u"}'

}


print_file()
{
	if [[ $cnt -eq 2 ]]; then
		logs="$header"
	else
		logs="$header"$'\n'"$logs"
	fi
	echo "$logs"

}

command_check()
{
	if [[ $used_command == "infected" ]]; then
		bad_lines
		filter_file
		infected
	elif [[ $used_command == "gender" ]]; then
		bad_lines
		filter_file
		gender
	elif [[ $used_command == "age" ]]; then
		bad_lines
		filter_file
		print_age
	elif [[ $used_command == "daily" ]]; then
		bad_lines
		filter_file
		daily
	elif [[ $used_command == "monthly" ]]; then
		bad_lines
		filter_file
		monthly
	elif [[ $used_command == "yearly" ]]; then
		bad_lines
		filter_file
		yearly
	elif [[ $used_command == "countries" ]]; then
		bad_lines
		filter_file
		countries
	elif [[ $used_command == "districts" ]]; then
		bad_lines
		filter_file
		districts
	elif [[ $used_command == "regions" ]]; then
		bad_lines
		filter_file
		regions
	elif [[ $used_command == "merge" ]]; then
		filter_file
		print_file
	elif [[ $used_command == "none" ]]; then
		filter_file
		print_file
	fi
}

filter_file()
{

	if [[ filter_a -eq 1 ]]; then
		if ! [[ $after_date =~ ^[0-9]{4}-(0[0-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$ ]] ; then
			echo "Error: Wrong date format after -a" 1>&2
			exit 1
		fi

		year=$(echo "$after_date" | cut -d "-" -f1)
		month=$(echo "$after_date" | cut -d "-" -f2)
		day=$(echo "$after_date" | cut -d "-" -f3)
		
		logs=$(echo "$logs" | awk -F, -vday="$day" -vmonth="$month" -vyear="$year" '{
			split($2, dates, "-")
			if (dates[1] == "")
			{
				next
			}
			if (dates[1] > year)
			{
				print $0
			}
			else if (dates[1] == year)
			{
				if (dates[2] > month)
				{
					print $0
				}
				else if (dates[2] == month)
				{
					if (dates[3] >= day)
					{
						print $0
					}
				}
			}
			else
			{
				next
			}
	
		}')
	fi

	if [[ filter_b -eq 1 ]]; then
		if ! [[ $before_date =~ ^[0-9]{4}-(0[0-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$ ]] ; then
			echo "Error: Wrong date format after -b" 1>&2
			exit 1
		fi

		year=$(echo "$before_date" | cut -d "-" -f1)
		month=$(echo "$before_date" | cut -d "-" -f2)
		day=$(echo "$before_date" | cut -d "-" -f3)
		
		logs=$(echo "$logs" | awk -F, -vday="$day" -vmonth="$month" -vyear="$year" '{
			split($2, dates, "-")
			
			if (dates[1] == "")
			{
				next
			}

			if (dates[1] < year)
			{
				print $0
			}
			else if (dates[1] == year)
			{
				if (dates[2] < month)
				{
					print $0
				}
				else if (dates[2] == month)
				{
					if (dates[3] <= day)
					{
						print $0
					}
				}
			}
		}')
	fi

	if [[ filter_g -eq 1 ]]; then
		if [[ $which_gender == "M" ]]; then
			logs=$(echo "$logs" | awk -F, '$4 ~/M/ {print $0}')
		elif [[ $which_gender == "Z" ]]; then
			logs=$(echo "$logs" | awk -F, '$4 ~/Z/ {print $0}')
		else
			echo "Error: Wrong gender after -g" 1>&2
			exit 1
		fi
	fi
}

bad_lines()
{
	logs=$(echo "$logs" | gawk -F, -vOFS="," '{
		while (sub(/[[:space:]]+/,"", $0) == 1);
    	if( $0 != "")
		{

			if ($2 ~ /^[0-9]{4}-(0[0-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
			{
				if ($3 ~ /^(0|[1-9]|[1-9][0-9]|[1][0-9][0-9])$/)
				{
					print $0
				}
				else
				{
					if ($3 == "")
					{
						print $0
						next
					}
					print "Invalid age: " $0 | "cat 1>&2";
					next
				}
			}
			else
			{	
				if ($2 == "")
				{
					print $0 
					next
				}
				print "Invalid date: " $0 | "cat 1>&2";
				next
			}
		}
	}')
}

while getopts "ha:b:g:s" args; do
	case "${args}" in
		h)
			use_help
			;;
		a)
			filter_a=1
			after_date=${OPTARG}
			;;
		b)
			filter_b=1
			before_date=${OPTARG}
			;;
		g)
			filter_g=1
			which_gender=${OPTARG}
			;;
		s)
			filter_s=1
			;;
	esac
done

while [ $# -gt 0 ]; do
	case "$1" in
		infected | merge | gender | age | daily | monthly | yearly | countries | districts | regions)
			used_command=$1
			shift
			;;
		*.csv)
			if [[ $cnt -eq 0 ]]; then
				logs=$(cat 2>/dev/null < "$1")
				if [[ $? -eq 1 ]]; then
					echo "$1: no such file. " 1>&2
					exit 3
				fi
				logs=$(echo "$logs" | awk -F, 'NR == 1{next} {print $0}')
				cnt=1
			else
				logs="${logs}"$'\n'"$(awk -F, 'NR == 1{next} {print $0}' $1)"
			fi
			shift
			;;
		*.csv.gz)
			unziped=$(gzip -dck "$1" 2>/dev/null)
			if [[ $? -eq 1 ]]; then
				echo "$1: no such file. " 1>&2
				exit 3
			fi

			if [[ $cnt -eq 0 ]]; then
				logs=$(echo "$unziped" | awk -F, 'NR == 1{next} {print $0}')	
				cnt=1
			else
				logs="${logs}"$'\n'"$(echo "$unziped" | awk -F, 'NR == 1{next} {print $0}')"
			fi
			shift
			;;
		*.csv.bz2)
			unziped=$(bzip2	-dck "$1" 2>/dev/null)
			if [[ $? -eq 1 ]]; then
				echo "$1: no such file. " 1>&2
				exit 3
			fi

			if [[ $cnt -eq 0 ]]; then
				logs=$(echo "$unziped" |awk -F, 'NR == 1{next} {print $0}')	
				cnt=1
			else
				logs="${logs}"$'\n'"$(echo "$unziped" | awk -F, 'NR == 1{next} {print $0}')"
			fi
			shift
			;;
		-a |-b |-g)
			shift
			shift
			;;
		-h| -s)
			shift
			;;
		*)
			echo "Bad argument: $1. For help run ./corona -h." 1>&2
			exit 2
			shift
			;;
	esac
done


if [[ $cnt -eq 0 ]]; then
	logs=`cat`
	if [[ $logs == "" ]]; then
		cnt=2
	else
		logs=$(echo "$logs" | awk -F, 'NR == 1{next} {print$0}')
	fi
fi
command_check

exit 0
